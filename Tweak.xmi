#import <notify.h>
#include <substrate.h>
#include <time.h>
#import <IconSupport/ISIconSupport.h>

#include "states.h"
#include "prefs.h"

#import "compatibility/ccquick.h"

#import "PIStatusBarIcon.h"
#import "WelcomeAlertDelegate.h"
#import "PIPreferences.h"

#import <AudioToolBox/AudioServices.h>
//#import <CoreFoundation/CFUserNotification.h>
#import <CoreFoundation/CFRunLoop.h>

#import <SpringBoard/SBApplication.h>
#import <SpringBoard/SBApplicationIcon.h>
#import <SpringBoard/SBAppSwitcherModel.h>
#import <SpringBoard/SBDefaultIconModelStore.h>
#import <SpringBoard/SBDisplayItem.h>
#import <SpringBoard/SBDisplayLayout.h>
#import <SpringBoard/SBFolder.h>
#import <SpringBoard/SBIconModel.h>
#import <SpringBoard/SBIconController.h>
#import <SpringBoard/SBUserAgent.h>
#import <SpringBoard/SBUIController.h>
#import <SpringBoard/SBApplicationController.h>
#import <BulletinBoard/BBBulletin.h>
#import <SpringBoard/SBIcon.h>
#import <SpringBoard/SBIconView.h>
#import <SpringBoard/SBIconViewMap.h>
#import <SpringBoard/SBFolderIcon.h>
//#import <SpringBoard/SBFolderIconBackgroundView.h>
#import <SpringBoard/SBLockScreenViewController.h>
//#import <SpringBoard/PLApplicationCameraViewController.h>
//#import <SpringBoard/SBLockScreenCameraController.h>
#import <SpringBoard/SBNotificationCenterController.h>
#import <SpringBoard/SBNotificationCenterViewController.h>
#import <SpringBoard/SBNotificationsAllModeViewController.h>
#import <SpringBoard/SBBulletinViewController.h>

#import <ManagedConfiguration/MCPasscodeManager.h>
#import <SpringBoard/SBDeviceLockController.h>
#import <SpringBoard/SBLockScreenManager.h>
#import <SpringBoard/SBUserAgent.h>

#import <BulletinBoard/BBSound.h>
#import <BulletinBoard/BBAttachments.h>

//#import <UIKit/UIApplication2.h>

#import <SpringBoard/SBBacklightController.h>

#import "PasswordAlertDelegate.h"

static BOOL global_NotJustRespring = NO;

static NSMutableArray *global_AllApplicationIcons;

static BOOL global_NoVibrateWhenEnable = NO;

static id global_slfe;
static BOOL global_OnceUnlockSuccessfully = NO;
static BOOL global_HalfSlideUnlock_DeviceHasSystemPasscodeSet;    //Get value in global_HalfSlideUnlock_DeviceHasSystemPasscodeSet SBDeviceLockController - (BOOL)deviceHasPasscodeSet

//

/* Toggle Functions */

static BOOL global_Enable;

void _enableProtectiPlus();
void enableProtectiPlus(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo);
void _disableProtectiPlusWithoutPassword();
void _disableProtectiPlus();
void disableProtectiPlus(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo);
void toggleProtectiPlus(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo);
void updatePreferences(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo);

void vibrateIfNecessary();
void removeProtectedOrHiddenAppsInAppSwitcher();
void killApplicationUnderLockScreenIfNecessary();
void exitForegroundApplicationIfNecessary();
void updateIconBadgeView();
void killApplicationByAppID(NSString *appID);

BOOL appIdentifierIsInProtectedAppsList(NSString *appIdentifier);
BOOL appIdentifierIsInHiddenAppsList(NSString *appIdentifier);

static NSDictionary *global_IconState;
static NSDate *global_EnableTime;

static BOOL global_LockScreenCameraNeedReInitSession = NO;

/* End Of Toggle Functions */


/* Status Bar Icon Functions */

void addStatusBarItemIfNecessary();
//void removeStatusBarItemIfNecessary();
void addStatusBarItemIfNecessaryNoMatterGlobalEnable();
void removeStatusBarItemIfNecessaryNoMatterGlobalEnable();

/* End Of Status Bar Icon Functions */


/* Helpers */

static void refreshNotificationCenter();
static void iconsVisibilityChanged();

/* End Of Helpers */

void check();

void resetPreferences(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo);

void turnOnBacklightIfNecessary();
void vibrateNotificationIfNecessary();

void removeProtectedOrHiddenAppsInAppSwitcher();

#include "hooks/activate_app_switcher.xm"
#include "hooks/bypass_passcode_and_half_slide_unlock.xm"
#include "hooks/control_center.xm"
#include "hooks/edit_icon.xm"
#include "hooks/hide_app_icon.xm"
#include "hooks/launch_app.xm"
#include "hooks/lockscreen_camera_photos.xm"
#include "hooks/notification_center.xm"
#include "hooks/notification.xm"
#include "hooks/open_folders.xm"
#include "hooks/siri.xm"
#include "hooks/spotlight.xm"
#include "hooks/switch_app.xm"

/* Helpers */

static void refreshNotificationCenter() {
    SBNotificationCenterViewController *viewController = (SBNotificationCenterViewController *)[[objc_getClass("SBNotificationCenterController") sharedInstance] viewController];
    SBNotificationsAllModeViewController *allModeViewController = MSHookIvar<SBNotificationsAllModeViewController *>(viewController, "_allModeViewController");
    if (allModeViewController) {
        SBBulletinViewController *allModeBulletinViewController = MSHookIvar<SBBulletinViewController *>(allModeViewController, "_bulletinViewController");
        if (allModeBulletinViewController) {
            [allModeBulletinViewController setTableViewNeedsReload];
        }
    }
}

static void iconsVisibilityChanged() {
    SBIconModel *iconModel = [(SBIconController *)[objc_getClass("SBIconController") sharedInstance] model];
    NSSet *_hiddenIconTags = MSHookIvar<NSSet *>(iconModel, "_hiddenIconTags");
    NSSet *_visibleIconTags = MSHookIvar<NSSet *>(iconModel, "_visibleIconTags");
    if (_hiddenIconTags!=nil && _visibleIconTags!=nil) {
        NSMutableSet *hiddenIconTags = [NSMutableSet setWithSet:_hiddenIconTags];
        NSMutableSet *visibleIconTags = [NSMutableSet setWithSet:_visibleIconTags];
        [iconModel setVisibilityOfIconsWithVisibleTags:visibleIconTags hiddenTags:hiddenIconTags];
        [iconModel layout];
    }
}

/* End of Helpers */



/* Toggle Functions */

void _enableProtectiPlus() {
    if (global_Enable)  //Enabled already
        return;

    addStatusBarItemIfNecessaryNoMatterGlobalEnable();

    vibrateIfNecessary();

    if (AllowAccessNotificationCenter_IsEnabled) {
        refreshNotificationCenter();
    }

    if (HideAppIcons_IsEnabled) {
        SBIconModel *iconModel = [(SBIconController *)[objc_getClass("SBIconController") sharedInstance] model];
        global_IconState = [[iconModel iconState] retain];
    }

    removeProtectedOrHiddenAppsInAppSwitcher();

    global_Enable = YES;

    global_LockScreenCameraNeedReInitSession = YES;

    if (HideAppIcons_IsEnabled) {
        iconsVisibilityChanged();
    }

    global_EnableTime = [[NSDate alloc] init];

    if ([[objc_getClass("SBUserAgent") sharedUserAgent] deviceIsLocked]) {
        killApplicationUnderLockScreenIfNecessary();
    } else {
        exitForegroundApplicationIfNecessary();
    }

    updateIconBadgeView();

//    [[%c(SBIconController) sharedInstance] noteIconStateChangedExternally]; // clean icons badge

    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{
        if (HideAppIcons_IsEnabled) {
            saveStateObjectForKey(global_IconState, @"iconState");
        }
        saveStateObjectForKey(global_EnableTime, @"enableTime");
        saveStateObjectForKey([NSNumber numberWithBool:global_Enable], @"enable");
    });
}

void enableProtectiPlus(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo) {
    _enableProtectiPlus();
}

void _disableProtectiPlusWithoutPassword() {
    removeStatusBarItemIfNecessaryNoMatterGlobalEnable();

    vibrateIfNecessary();

    if (AllowAccessNotificationCenter_IsEnabled) {
        refreshNotificationCenter();
    }

    global_Enable = NO;

    global_LockScreenCameraNeedReInitSession = YES;

    if (HideAppIcons_IsEnabled) {
        iconsVisibilityChanged();
        if (!global_IconState) {
            global_IconState = getStateObjectForKey(@"iconState");
        }
        [global_IconState writeToFile:[[[objc_getClass("SBDefaultIconModelStore") sharedInstance] currentIconStateURL] path] atomically:YES];
        iconsVisibilityChanged();
        //        [[%c(SBIconController) sharedInstance] noteIconStateChangedExternally];
    }

    global_EnableTime = nil;

    updateIconBadgeView();

    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        saveStateObjectForKey([NSNull null], @"enableTime");
        saveStateObjectForKey([NSNumber numberWithBool:global_Enable], @"enable");
    });
}

void _disableProtectiPlus() {
    if (!global_Enable) //Disabled already
        return;

    if (
        EnablePassword_IsEnabled && ![GetValueOf_Password isEqualToString:@""]
        &&
        (
         (
          global_HalfSlideUnlock_DeviceHasSystemPasscodeSet
          &&
          (
           !BypassSystemPasscode_IsEnabled
           ||
           (BypassSystemPasscode_IsEnabled && global_OnceUnlockSuccessfully)
          )
         )
         ||
         !global_HalfSlideUnlock_DeviceHasSystemPasscodeSet
        )
       ) {
        PasswordAlertDelegate *passwordDelegate = [[%c(PasswordAlertDelegate) alloc] init];
        [passwordDelegate showAlert];
    } else {
        _disableProtectiPlusWithoutPassword();
    }
}

void disableProtectiPlus(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo) {
    _disableProtectiPlus();
}

void toggleProtectiPlus(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo) {
    NSLog(@"Toggle Protecti %d", global_Enable);
    if (global_Enable) {
        _disableProtectiPlus();
    } else {
        _enableProtectiPlus();
    }
}

void vibrateIfNecessary() {
    if (Vibrate_IsEnabled && !global_NoVibrateWhenEnable)
    {
        AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
    }
}

void updateIconBadgeView() {
    SBIconModel *iconModel = [[objc_getClass("SBIconViewMap") homescreenMap] iconModel];
    NSSet *allApplicationIcons = [iconModel _applicationIcons];
    for (SBApplicationIcon *icon in allApplicationIcons) {
        [icon noteBadgeDidChange];
    }
}

void removeProtectedOrHiddenAppsInAppSwitcher() {
    NSArray *displayLayouts = [[objc_getClass("SBAppSwitcherModel") sharedInstance] _recentsFromPrefs];
    for (SBDisplayLayout *displayLayout in displayLayouts) {
        SBDisplayItem *displayItem = displayLayout.displayItems[0];
        NSString *appIdentifier = displayItem.displayIdentifier;
        if (appIdentifierIsInProtectedAppsList(appIdentifier) || appIdentifierIsInHiddenAppsList(appIdentifier)) {
            [(SBAppSwitcherModel *)[objc_getClass("SBAppSwitcherModel") sharedInstance] remove: displayLayout];
        }
    }
}

void killApplicationUnderLockScreenIfNecessary() {
    NSString *foregroundAppID = [[objc_getClass("SBUserAgent") sharedUserAgent] foregroundApplicationDisplayID];
    if (appIdentifierIsInProtectedAppsList(foregroundAppID)) {
        killApplicationByAppID(foregroundAppID);
    } else {

    }
}

void exitForegroundApplicationIfNecessary() {
    NSString *foregroundAppID = [[objc_getClass("SBUserAgent") sharedUserAgent] foregroundApplicationDisplayID];
    if (foregroundAppID && appIdentifierIsInProtectedAppsList(foregroundAppID)) {
        [[objc_getClass("SBUIController") sharedInstance] clickedMenuButton];
//        [(SBUIController *)[%c(SBUIController) sharedInstance] _handleButtonEventToSuspendDisplays:YES displayWasSuspendedOut:NULL];
        if (![foregroundAppID isEqualToString:@"com.saurik.Cydia"]) {
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{
                sleep(1);
                killApplicationByAppID(foregroundAppID);
            });
        }
    }
}

void killApplicationByAppID(NSString *appID) {
    SBApplication *foregroundApp = [[objc_getClass("SBApplicationController") sharedInstance] applicationWithDisplayIdentifier:appID];
    int foregroundAppPID = [foregroundApp pid];
    if (foregroundAppPID) {
        system([[@"kill -9 " stringByAppendingFormat:@"%d", foregroundAppPID] cStringUsingEncoding:NSASCIIStringEncoding]);
    } else {

    }
}

BOOL appIdentifierIsInProtectedAppsList(NSString *appIdentifier) {
    return [[PIPreferences.sharedPreferences objectForKey:[@"ProtectedApp_" stringByAppendingString:(appIdentifier?:@"")]] boolValue];
}

BOOL appIdentifierIsInHiddenAppsList(NSString *appIdentifier) {
    return [[PIPreferences.sharedPreferences objectForKey:[@"HiddenApp_" stringByAppendingString:(appIdentifier?:@"")]] boolValue];
}

/* End Of Toggle Functions */



/* Status Bar Icon Functions */

void addStatusBarItemIfNecessary() {
    if (StatusBarIcon_IsEnabled && global_Enable && [[UIApplication sharedApplication] respondsToSelector:@selector(addStatusBarImageNamed:)])
    {
//        [[UIApplication sharedApplication] addStatusBarItem:14];
        [[PIStatusBarIcon sharedInstance] showIcon];
    }
}
//void removeStatusBarItemIfNecessary() {
//    if (StatusBarIcon_IsEnabled && !global_Enable && [[UIApplication sharedApplication] respondsToSelector:@selector(removeStatusBarImageNamed:)])
//    {
//        [[UIApplication sharedApplication] removeStatusBarItem:14];
//    }
//}
void addStatusBarItemIfNecessaryNoMatterGlobalEnable() {
    if (StatusBarIcon_IsEnabled && [[UIApplication sharedApplication] respondsToSelector:@selector(addStatusBarImageNamed:)])
    {
//        [[UIApplication sharedApplication] addStatusBarItem:14];
        [[PIStatusBarIcon sharedInstance] showIcon];
    }
}
void removeStatusBarItemIfNecessaryNoMatterGlobalEnable() {
    if ([[UIApplication sharedApplication] respondsToSelector:@selector(removeStatusBarImageNamed:)])
    {
//        [[UIApplication sharedApplication] removeStatusBarItem:14];
        [[PIStatusBarIcon sharedInstance] hideIcon];
    }
}

/* End Of Status Bar Icon Functions */






%hook SBLockScreenManager

- (void)_finishUIUnlockFromSource:(int)arg1 withOptions:(id)arg2 {
    %orig;
//    if (IndicateMissingNotification_IsEnabled && !global_Enable) {
//        setPendingNotificationApplicationIconIndicatorInRootFolder();
//    }

    if (!global_NotJustRespring) {  // Just respring
        global_NotJustRespring = YES;
        if (HideAppIcons_IsEnabled) {
            iconsVisibilityChanged();
        }
    } else {

    }

    if (![getStateObjectForKey(@"hasInstalled") boolValue]) {
        saveStateObjectForKey([NSNumber numberWithBool:YES], @"hasInstalled");
        WelcomeAlertDelegate *welcomeDelegate = [[WelcomeAlertDelegate alloc] init];
        [welcomeDelegate showAlert];
    }
}

%end




%ctor {
    dlopen("/Library/MobileSubstrate/DynamicLibraries/IconSupport.dylib", RTLD_NOW);
    [[objc_getClass("ISIconSupport") sharedInstance] addExtension:@"com.gviridis.protectiplus"];

    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(),NULL,&enableProtectiPlus,CFSTR("com.gviridis.protectiplus/Enable"),NULL,0);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(),NULL,&disableProtectiPlus,CFSTR("com.gviridis.protectiplus/Disable"),NULL,0);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(),NULL,&toggleProtectiPlus,CFSTR("com.gviridis.protectiplus/Toggle"),NULL,0);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(),NULL,&updatePreferences,CFSTR("com.gviridis.protectiplus/UpdatePreferences"),NULL,0);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(),NULL,&resetPreferences,CFSTR("com.gviridis.protectiplus/ResetPreferences"),NULL,0);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(),NULL,&handleSystemPasscodeChange,CFSTR("com.gviridis.protectiplus/SystemPasscodeChanged"),NULL,0);
    notify_post("com.gviridis.protectiplus/UpdatePreferences");

    if (![[NSFileManager defaultManager]fileExistsAtPath:@kPreferencesStatePath]) {

    } else {
        global_Enable = [getStateObjectForKey(@"enable") boolValue];
        global_IconState = getStateObjectForKey(@"iconState");
        global_EnableTime = getStateObjectForKey(@"enableTime");
//        global_PendingNotifications = getStateObjectForKey(@"pendingNotifications");
    }

    if (!global_AllApplicationIcons)
        global_AllApplicationIcons = [[NSMutableArray alloc] init];

    if (AutoEnable_IsEnabled) {
        _enableProtectiPlus();
    }
}










//=================================================================================














void updatePreferences(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo) {

    [PIPreferences updatePreferences];
}

void resetPreferences(CFNotificationCenterRef center,void *observer,CFStringRef name,const void *object,CFDictionaryRef userInfo) {

    [PIPreferences resetPreferences];
}


void vibrateNotificationIfNecessary() {
    if (global_Enable && VibrateNotifications_IsEnabled) {
        AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
    }
}

/****************** Backligh for new messages *********************/

void turnOnBacklightIfNecessary() {
    if (TurnOnBacklighWhenReceiveNewNotifications_IsEnabled && global_Enable) {
        [[%c(SBBacklightController) sharedInstance] resetLockScreenIdleTimer];
        [[%c(SBBacklightController) sharedInstance] turnOnScreenFullyWithBacklightSource:0];
    } else {

    }
}

/******************************************************************/
